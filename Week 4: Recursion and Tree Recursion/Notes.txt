Base cases
Recursive cases are eval with recursive calls

Iteration special case of Recursion
different math formula

def fact(n):
  if n == 0:
    return 1
  else:
    return n * fact(n-1)
 1. Verify the base case
 2. Treat fact as a functional abstraction
 3. Assum that fact(n-1 is correct
 4. Verify fact(n) is correct, assuming that fact(n-1) is correct
 
# Luhn algorithm: mutual recursion
def luhn_sum(n):
    if n < 10:
        return n
    else:
        all_but_last, last = split(n)
        return luhn_sum_double(all_but_last) + last

def luhn_sum_double(n):
    all_but_last, last = split(n)
    luhn_digit = sum_digits(2 * last)
    if n < 10:
        return luhn_digit
    else:
        return luhn_sum(all_but_last) + luhn_digit
 
 # Converting iteration to recursion

def sum_digits_iter(n);
    digit_sum = 0
    while n > 0:
        n, last = split(n)
        digit_sum = digit_sum + last
    return digit_sum

def sum_digits_rec(n, digit_sum):
    if n == 0:
        return digit_sum
    else:
        n, last = split(n)
        return sum_digits_rec(n, digit_sum + last)

 figure out what state must be maintained by the iterative function 
 the state of an iteration can be passed as arguments

