#####################Summary##############
Division /, Floor Div //, modulo %,
Evaluate the operator, and then the operands (from left to right).
Apply the operator to the operands (the values of the operands).
print and return (and return ends the func

not has the highest priority
and
or has the lowest priority

if you run into error messages, try to identify the problem before asking for help. 

SyntaxError	Contained improper syntax 
(e.g. missing a colon after an if statement or forgetting to close parentheses/quotes)
IndentationError	Contained improper indentation 
(e.g. inconsistent indentation of a function body)
TypeError	Attempted operation on incompatible types 
(e.g. trying to add a function and a number) or called function with the wrong number of arguments
ZeroDivisionError	
Attempted division by zero





'''
Global frame
Local frame
Multiple Environments in 0ne diagram
Again: every expr is eval in the context of an envir
A name eva to the value bound to that name in the earlist frame of the current envir 
in which that name is found
intended
'''
from operator import mul
def square(square):
  return mul(square, square)
  print(1)
square(4)

'''
A statement is executed by the interpreter to perform an action
suite: a sequence of statements
clauses: true and execute the whole suite, otherwise not excute
boolean context
'''
i, total =0, 0
while i < 3:
  i += 1
  total += 1
>>> i = 1
>>> total
3

def fib(n):
  pred, curr = 0, 1
  k = 1
  whie k < n:
    pred, curr = curr, pred + curr
    k += 1
 return curr
'''
Iteration

'''

'''
Higher-Order Function: takes a func as an argument value or returns a func as a return value 
assert 2 > 3, 'False'
Lambda expr: single expr (parent frame,  do not give function an name
Control expr, conditional expr
x = 0
1/x if x != 0 else 0
'''
def make_adder(n):
  def adder(k):
    return k + n
  return adder
s = lambda x: x * x
s(4)
